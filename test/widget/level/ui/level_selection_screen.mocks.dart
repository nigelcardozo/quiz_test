// Mocks generated by Mockito 5.0.16 from annotations
// in quiz_test/test/widget/level/ui/level_selection_screen.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:quiz_test/level/repository/level_repository.dart' as _i2;
import 'package:quiz_test/level/view_model/level_selection_view_model.dart'
    as _i3;
import 'package:quiz_test/models/levels.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLevelRepository_0 extends _i1.Fake implements _i2.LevelRepository {}

/// A class which mocks [LevelSelectionViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockLevelSelectionViewModel extends _i1.Mock
    implements _i3.LevelSelectionViewModel {
  MockLevelSelectionViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LevelRepository get levelRepository =>
      (super.noSuchMethod(Invocation.getter(#levelRepository),
          returnValue: _FakeLevelRepository_0()) as _i2.LevelRepository);
  @override
  set levelRepository(_i2.LevelRepository? _levelRepository) =>
      super.noSuchMethod(Invocation.setter(#levelRepository, _levelRepository),
          returnValueForMissingStub: null);
  @override
  List<_i4.Levels> get levels => (super.noSuchMethod(Invocation.getter(#levels),
      returnValue: <_i4.Levels>[]) as List<_i4.Levels>);
  @override
  set levels(List<_i4.Levels>? _levels) =>
      super.noSuchMethod(Invocation.setter(#levels, _levels),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void setRepository(_i2.LevelRepository? levelRepository) =>
      super.noSuchMethod(Invocation.method(#setRepository, [levelRepository]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<List<_i4.Levels>> fetchLevels() =>
      (super.noSuchMethod(Invocation.method(#fetchLevels, []),
              returnValue: Future<List<_i4.Levels>>.value(<_i4.Levels>[]))
          as _i5.Future<List<_i4.Levels>>);
  @override
  bool isLevelLocked(int? levelNumber) =>
      (super.noSuchMethod(Invocation.method(#isLevelLocked, [levelNumber]),
          returnValue: false) as bool);
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
